<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tutorial | BrettBeers]]></title>
  <link href="http://beersbr.github.com/blog/categories/tutorial/atom.xml" rel="self"/>
  <link href="http://beersbr.github.com/"/>
  <updated>2011-12-07T23:53:41-07:00</updated>
  <id>http://beersbr.github.com/</id>
  <author>
    <name><![CDATA[Brett Beers]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Canvas part 4: A game loop]]></title>
    <link href="http://beersbr.github.com/blog/2011/12/06/canvas-part-4/"/>
    <updated>2011-12-06T13:36:00-07:00</updated>
    <id>http://beersbr.github.com/blog/2011/12/06/canvas-part-4</id>
    <content type="html"><![CDATA[<h3>A game loop in javascript</h3>

<p>A game loop is pretty pivotal in any game taking on a common format of update() -> draw(). Meaning that you update() all of your game objects and data for the current frame and then draw that frame to the screen. We do this over and over at a fixed framerate (usually 30 or 60 frames per second) and we get an animation. Things like user input and system changes would go into the update() section, while all your drawing calls would go into the draw() section. Here is a quick example:</p>

<p>``` javascript moving_box http://tinkerbin.com/pP0suTI6
//...</p>

<p>var cvs = document.getElementById('c');
var ctx = cvs.getContext('2d');
var interval = 0;</p>

<p>// get the canvas width and height
var scr_w = cvs.width;
var scr_h = cvs.height;</p>

<p>function Rect(){</p>

<pre><code>this.x = 200;
this.y = 200;
</code></pre>

<p>}</p>

<p>var urect = new Rect();</p>

<p>function Update(){</p>

<pre><code>urect.x = (urect.x + 1)%scr_w;
urect.y = (urect.y + 1)%scr_h;
</code></pre>

<p>}</p>

<p>function Draw(){</p>

<pre><code>ctx.save(); // save the context state so we don't disrupt any other draw calls
ctx.fillStyle = "rgb(100, 200, 100)";
ctx.fillRect(urect.x - 10, urect.y - 10, 20, 20);
ctx.restore(); // restore the context state to whatever it was before
</code></pre>

<p>}</p>

<p>function Loop(){</p>

<pre><code>Update();
ctx.clearRect(0, 0, scr_w, scr_h);
Draw(); 
</code></pre>

<p>}</p>

<p>window.onload = function(){</p>

<pre><code>var interval = setInterval(Loop, 1000/30); // run it at 30 fps
</code></pre>

<p>}</p>

<p>//...
```</p>

<p>Ok I haven't done anything completely new except for the use of <code>setInterval</code>. We are using it to repeat the game loop at a fixed amount of time. It's somewhat crude but for now it will work perfectly. The sytax for <code>setInterval</code> is as follows:</p>

<pre><code>integer_id setInterval(function_pointer, time_interval_mili);
</code></pre>

<p>It returns an id that can be used by a sister function <code>clearInterval(id)</code> to stop the interval. Then you pass a function pointer or a string of code. Lastly you give it the time interval at which to execute the function or code passed to <code>setInterval</code>. 1000 miliseconcs is a second. So if we divide by the desired framerate we will be given the amount of miliseconds it takes to achieve that.</p>

<h3>Stepping through the rest of the code</h3>

<p>Now to iterate over the rest of the code we do the usual stuff by getting the canvas and context into variables. Secondly we create an object named <code>Rect</code> which is just a container for holding some values. We instanciate a <code>Rect</code> as <code>urect</code>. Then there is a funciton for updating the state of <code>urect</code>. It takes the current x position, <code>urect.x</code>, and increses it by 1 and the mod operator makes sure that we never go over the max screen width. It does the same with <code>urect.y</code>. We grave the max screen width <code>scr_w</code> and <code>scr_h</code> right from the canvas.</p>

<p>Next we have the <code>Draw()</code> function which takes our object instace and handles drawing a rectangle at the position of our <code>urect</code>. We use <code>save()</code> and <code>restore()</code> in this function so that if we have another method that is drawing stuff we dont interupt its drawing. Think of it as saving a set attributes onto a stack similar to openGl, for anyone who has used openGl. The <code>save()</code> function saves all the current canvas attributes. While <code>restore()</code> pops the last save off the "stack" and the attributes go back to whatever they were before the last <code>save()</code> call.</p>

<p>Lastly we have the <code>Loop()</code> function which is used in <code>setInterval()</code> to update the game objects and draw them to the canvas. All that loop does is act as a container for <code>setInterval()</code>. We call <code>Update()</code> then we clear the canvas so you don't have multiple images on the screen. Then it call <code>Draw()</code> which draws the rectangle on the canvas.</p>

<h3>And a game loop is made...</h3>

<p>While this example was simple it's not entirely unrealistic. Things will get more interesting after some of the simple parts are covered. Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Canvas part 2: Shapes and stuff]]></title>
    <link href="http://beersbr.github.com/blog/2011/11/23/canvas-part-2-shapes-and-stuff/"/>
    <updated>2011-11-23T13:41:00-07:00</updated>
    <id>http://beersbr.github.com/blog/2011/11/23/canvas-part-2-shapes-and-stuff</id>
    <content type="html"><![CDATA[<h3>A little more interesting</h3>

<p>The last tutorial I just showed how to get the canvas up on a page and into a state that something could be done with it. But drawing rectangles is kinda boring. So now I'll show you something a little more interesting.</p>

<h3>Shapes!</h3>

<p>Shapes are made by using paths to vertecies. For this we use the <code>moveTo(x, y)</code> and <code>lineTo(x, y)</code> methods.</p>

<ul>
<li><p><code>moveTo(x, y)</code> will move you to a point (x, y) without tracing the path to that point (x and y are pixel units). You usually use it for the start of your path.</p></li>
<li><p><code>lineTo(x, y)</code> will move you to a point (x, y) and trace the path there. So when we call <code>fill()</code> or <code>stroke()</code> (we will discuss them shortly ) we have something to draw.</p></li>
</ul>


<p>Let's have a look at the javascript:</p>

<p>``` javascript paths http://tinkerbin.com/J92xNsA6
window.onload = function(){
  var cvs = document.getElementById('c');
  var ctx = cvs.getContext('2d');</p>

<p>  ctx.moveTo(50, 50);
  ctx.lineTo(250, 50);
  ctx.lineTo(150, 150);
  ctx.lineTo(50, 50);
  ctx.strokeStyle = "rgb(0, 255, 0)";
  ctx.stroke();
}
```</p>

<p>We do a few things here. First we grab the canvas element. Then we <code>moveTo(50, 50)</code> which moves our invisible cursor to point 50, 50 on the canvas where the positive Y moves down instead of up. The next thing we do is use <code>lineTo(250, 50)</code> which will make a line from (50, 50), the previous point, to (250, 50) on the canvas. We do this several time till we close the shape with the <code>lineTo(50, 50)</code> from (150, 150).</p>

<p>Finally we draw the shape by calling <code>stroke()</code>. Shapes like this wont be drawn unless you call either stroke, drawing only the outline of the shape, or fill which will fill the shape in for you. You can call both to get a stroke and fill. Check out the <a href="http://tinkerbin.com/J92xNsA6">link</a> to play around with it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Canvas part 1: And so it begins...]]></title>
    <link href="http://beersbr.github.com/blog/2011/11/22/and-so-it-began-dot-dot-dot/"/>
    <updated>2011-11-22T23:41:00-07:00</updated>
    <id>http://beersbr.github.com/blog/2011/11/22/and-so-it-began-dot-dot-dot</id>
    <content type="html"><![CDATA[<h3>The programmers obligatory disclamer</h3>

<p>This is the first post of some tutorials and discoveries with HTML5's canvas using javascript. I'm sure I am not doing everything perfect and am certainly open to suggestions and corrections but mostly hope to create a segue from greater canvas noob to lesser canvas noob.</p>

<h3>Starting out with your first canvas</h3>

<p>What makes working with canvas so nice is how fast you can get things up and running. You dont need a compiler or a big IDE or knowledge of any complex graphics libraries. All you need is a browser and some javascript. Here is as simple as it gets:</p>

<p>``` html
<html>
<head></p>

<pre><code>&lt;script&gt;
    // We will just put our javascript right in the head
&lt;/script&gt;
</code></pre>

<p></head>
<body></p>

<pre><code>&lt;canvas id='c' width=640 height=480&gt;&lt;/canvas&gt;
</code></pre>

<p></body>
</html>
```</p>

<p>That was easy enough right? Now iff you run this you probably wont see anything, as the background of the canvas is probably white. So let's draw some stuff on the screen.</p>

<p>``` javascript yellow_rectangle http://tinkerbin.com/H4Bdbt4B
//<head></p>

<p>window.onload = function(){</p>

<pre><code>var cvs = document.getElementById('c');
var ctx = cvs.getContext('2d');

ctx.fillStyle = "rgb(255, 255, 0)";
ctx.fillRect(50, 50, 200, 150);
</code></pre>

<p>}</p>

<p>//</head>
<code>``
Now looking at the code, you can probably see everything that is happening. First we grab the canvas element and assign it to variable cvs. Secondly we set the context to 2d and assign it to the variable ctx. Now that we have a context to draw on, we can set the</code>fillStyle<code>of the context. The</code>fillStyle` tells the context what color to fill objects with.
You can use several forms for specifying the color:</p>

<p>``` javascript</p>

<pre><code>ctx.fillStyle = "rgb(255, 255, 255)"; // is white
ctx.fillStyle = "rgba(255, 255, 200, 1.0)"; // is very pale yellow
ctx.fillStyle = "#ffffee"; // is also pale yellow
</code></pre>

<p><code>``
After that we call</code>fillRect`. This method will just create the rectangle on the canvas. The syntax is:</p>

<pre><code>fillRect(x, y, width, height)
</code></pre>

<h3>There you have it!</h3>

<p>Now that you know how to get started with the canvas try drawing some other objects. You can just take a look at <a href="http://tinkerbin.com/H4Bdbt4B" title="tinkerbin">this</a> tinkerbin. Look out for the next tutorial on more complex shapes.</p>
]]></content>
  </entry>
  
</feed>
