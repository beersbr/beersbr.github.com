<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | BrettBeers]]></title>
  <link href="http://beersbr.github.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://beersbr.github.com/"/>
  <updated>2011-12-06T13:35:29-07:00</updated>
  <id>http://beersbr.github.com/</id>
  <author>
    <name><![CDATA[Brett Beers]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Canvas part 3.1: Adding audio]]></title>
    <link href="http://beersbr.github.com/blog/2011/11/26/canvas-part-3-dot-1-adding-audio/"/>
    <updated>2011-11-26T21:49:00-07:00</updated>
    <id>http://beersbr.github.com/blog/2011/11/26/canvas-part-3-dot-1-adding-audio</id>
    <content type="html"><![CDATA[<h3>Game programming in canvas</h3>

<p>This is just a continuation of what I started in the last post. I covered images, so I though audio would be a good next step. Here we go...</p>

<h3>Audio in javascript</h3>

<p>Games aren't really complete without audio most of the time. I have not yet figured out how to gain full control of sound in javascript but here is a good first step -- Similar to the previous post on images we are going to create the element in javascript like so:</p>

<p>``` javascript</p>

<pre><code>var sound = document.createElement("audio");
sound.src = "path/to/file.ogg"; // or .wav

// load the sound
sound.load();
sound.play();
</code></pre>

<p>```</p>

<p>As said above the sound file has to be either an <code>.ogg</code> or <code>.wav</code>, at least for now. the <code>load()</code> function will make sure the data is in memory or so I have been told. Next you call <code>play()</code> and the sound will play to completion. Now looking at a context closer to that of a games; say we have an object we would load and then call <code>play()</code> during some collision or some event.</p>

<h4>Example (extremetly contrived):</h4>

<p>``` javascript
function player(){</p>

<pre><code>var my_pos = {x, y, w, h}; // some data describing this players position  
var health = 100;

//setup sound data
var collide_sound = document.createElement('audio');
collide_sound.src = 'some_sound.ogg';
collide_sound.load();

this.update = function(close_objects){
    for(var i in close_objects){
        if(this.collides_with(close_objects[i])){

            collide_sound.play();
            health -= 1;
            // do some stuff 
        }
    }
}

this.draw = function(){
    // some drawing code here
}

this.collides_with = function(an_object){
    // a collision function of some sort
}
</code></pre>

<p>}</p>

<p>// then we create a new player object and use it in our game.</p>

<p>```</p>

<p>Just some psudo code to give you an idea of how it would be used. You can also make a nice tune for the game in the background as you can have multiple audio files loaded and they can even be played at the same time.</p>

<h3>Some other neat parts to take note of...</h3>

<ul>
<li><code>audioELement.currentTime = 10;</code> will set the media time to 10 seconds.</li>
<li><code>audioElement.duration;</code> will return the duration of the media.</li>
<li><code>audioElement.pause();</code> will pause the media. There is no <code>stop()</code> for what ever reason but you can unset the src and reset the src (as an ugly hack) if you need to stop it.</li>
</ul>


<p>Those are just handy to remember. As always you can check the <a href="hhttps://developer.mozilla.org/En/Using_audio_and_video_in_Firefox">MDN docs</a>. Hope this helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Canvas part 3: A change in direction (or Images)]]></title>
    <link href="http://beersbr.github.com/blog/2011/11/24/canvas-part-3-a-change-in-direction/"/>
    <updated>2011-11-24T00:00:00-07:00</updated>
    <id>http://beersbr.github.com/blog/2011/11/24/canvas-part-3-a-change-in-direction</id>
    <content type="html"><![CDATA[<h3>Game programming in canvas</h3>

<p>Hopefully by know you have played with some of the drawing functions I used in the last two tutorials. I am sort of changing directions because programming games makes things really interesting and canvas gives you a quick platform to use. But first we need to discuss how we are going to get certain things on the browser. Things like images, sounds, key events, etc etc.</p>

<h3>Images in canvas (but mostly javascript)</h3>

<p>As it turns out drawing images on the screen is actually very simple:</p>

<p>``` javascript</p>

<pre><code>var image = new Image();
image.src = "/some/path/to/an.img";
</code></pre>

<p>```</p>

<ul>
<li>edit was made because there was an incorrect variable name in the code above. Fixed 'i' to 'image'</li>
</ul>


<p>Easy, right? Now all we have to do is draw it to the canvas. As luck would have it, that is super easy too!</p>

<p>``` javascript</p>

<pre><code>var cvs = document.getElementById('c');
var ctx = cvs.getContext('2d');

var i = new Image();
i.src = "/some/path/to/an.img";

ctx.drawImage(i, 100, 100);
</code></pre>

<p>```</p>

<p>Now that loads an image and draws it on the canvas at (100, 100). There are several <code>drawImage()</code> functions. They are all similar but are good to know so lets go ver them now.</p>

<ul>
<li><code>drawImage(image, x, y)</code> Draws an image from the top left corner at (x, y). This is the function I used above.</li>
<li><code>drawImage(image, x, y, width, height)</code> Draws an image to (x, y), as the size width, and height. It is basically a way to scale your images in canvas.</li>
<li><code>drawImage(image, source_x, source_y, source_height, source_width, destination_x, destination_y, destination_width, destination_height)</code> This one is a bit more complex in that it allows you to slice your image. This is useful for tile-sheets or sprite-maps. Source_* creates a rectangle you want to grab from the original image and destination is where  you are going to put that rectangle. You can tinker around with that by use the code above and playing with each function. I will put up some code as well in the very near future.</li>
</ul>


<p>One thing to note is that you can't grab coordinates that are not in the image. For example if you have an image with a width of 100 and height of 100, you can grab coordinates (-1, -1) to (500, 500). From my experience that will produce javascript image read errors.</p>

<h3>Splitting this section</h3>

<p>In an effort to keep these posts at a readable length I am going to split this part into sub parts. This was the image section and I will go over audio and then key events. You can find more information by checking out the <a href="https://developer.mozilla.org/en/HTML/Canvas">MDN docs</a>. You can also just send me a message with any thing you might have. Thank you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Canvas part 2: Shapes and stuff]]></title>
    <link href="http://beersbr.github.com/blog/2011/11/23/canvas-part-2-shapes-and-stuff/"/>
    <updated>2011-11-23T13:41:00-07:00</updated>
    <id>http://beersbr.github.com/blog/2011/11/23/canvas-part-2-shapes-and-stuff</id>
    <content type="html"><![CDATA[<h3>A little more interesting</h3>

<p>The last tutorial I just showed how to get the canvas up on a page and into a state that something could be done with it. But drawing rectangles is kinda boring. So now I'll show you something a little more interesting.</p>

<h3>Shapes!</h3>

<p>Shapes are made by using paths to vertecies. For this we use the <code>moveTo(x, y)</code> and <code>lineTo(x, y)</code> methods.</p>

<ul>
<li><p><code>moveTo(x, y)</code> will move you to a point (x, y) without tracing the path to that point (x and y are pixel units). You usually use it for the start of your path.</p></li>
<li><p><code>lineTo(x, y)</code> will move you to a point (x, y) and trace the path there. So when we call <code>fill()</code> or <code>stroke()</code> (we will discuss them shortly ) we have something to draw.</p></li>
</ul>


<p>Let's have a look at the javascript:</p>

<p>``` javascript paths http://tinkerbin.com/J92xNsA6
window.onload = function(){
  var cvs = document.getElementById('c');
  var ctx = cvs.getContext('2d');</p>

<p>  ctx.moveTo(50, 50);
  ctx.lineTo(250, 50);
  ctx.lineTo(150, 150);
  ctx.lineTo(50, 50);
  ctx.strokeStyle = "rgb(0, 255, 0)";
  ctx.stroke();
}
```</p>

<p>We do a few things here. First we grab the canvas element. Then we <code>moveTo(50, 50)</code> which moves our invisible cursor to point 50, 50 on the canvas where the positive Y moves down instead of up. The next thing we do is use <code>lineTo(250, 50)</code> which will make a line from (50, 50), the previous point, to (250, 50) on the canvas. We do this several time till we close the shape with the <code>lineTo(50, 50)</code> from (150, 150).</p>

<p>Finally we draw the shape by calling <code>stroke()</code>. Shapes like this wont be drawn unless you call either stroke, drawing only the outline of the shape, or fill which will fill the shape in for you. You can call both to get a stroke and fill. Check out the <a href="http://tinkerbin.com/J92xNsA6">link</a> to play around with it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Canvas part 1: And so it begins...]]></title>
    <link href="http://beersbr.github.com/blog/2011/11/22/and-so-it-began-dot-dot-dot/"/>
    <updated>2011-11-22T23:41:00-07:00</updated>
    <id>http://beersbr.github.com/blog/2011/11/22/and-so-it-began-dot-dot-dot</id>
    <content type="html"><![CDATA[<h3>The programmers obligatory disclamer</h3>

<p>This is the first post of some tutorials and discoveries with HTML5's canvas using javascript. I'm sure I am not doing everything perfect and am certainly open to suggestions and corrections but mostly hope to create a segue from greater canvas noob to lesser canvas noob.</p>

<h3>Starting out with your first canvas</h3>

<p>What makes working with canvas so nice is how fast you can get things up and running. You dont need a compiler or a big IDE or knowledge of any complex graphics libraries. All you need is a browser and some javascript. Here is as simple as it gets:</p>

<p>``` html
<html>
<head></p>

<pre><code>&lt;script&gt;
    // We will just put our javascript right in the head
&lt;/script&gt;
</code></pre>

<p></head>
<body></p>

<pre><code>&lt;canvas id='c' width=640 height=480&gt;&lt;/canvas&gt;
</code></pre>

<p></body>
</html>
```</p>

<p>That was easy enough right? Now iff you run this you probably wont see anything, as the background of the canvas is probably white. So let's draw some stuff on the screen.</p>

<p>``` javascript yellow_rectangle http://tinkerbin.com/H4Bdbt4B
//<head></p>

<p>window.onload = function(){</p>

<pre><code>var cvs = document.getElementById('c');
var ctx = cvs.getContext('2d');

ctx.fillStyle = "rgb(255, 255, 0)";
ctx.fillRect(50, 50, 200, 150);
</code></pre>

<p>}</p>

<p>//</head>
<code>``
Now looking at the code, you can probably see everything that is happening. First we grab the canvas element and assign it to variable cvs. Secondly we set the context to 2d and assign it to the variable ctx. Now that we have a context to draw on, we can set the</code>fillStyle<code>of the context. The</code>fillStyle` tells the context what color to fill objects with.
You can use several forms for specifying the color:</p>

<p>``` javascript</p>

<pre><code>"rgb(255, 255, 255)"; // is white
"rgba(255, 255, 200, 1.0)"; // is very pale yellow
"#ffffee"; // is also pale yellow
</code></pre>

<p><code>``
After that we call</code>fillRect`. This method will just create the rectangle on the canvas. The syntax is:</p>

<pre><code>fillRect(x, y, width, height)
</code></pre>

<h3>There you have it!</h3>

<p>Now that you know how to get started with the canvas try drawing some other objects. You can just take a look at <a href="http://tinkerbin.com/H4Bdbt4B" title="tinkerbin">this</a> tinkerbin. Look out for the next tutorial on more complex shapes.</p>
]]></content>
  </entry>
  
</feed>
